{"version":3,"sources":["components/Main.js","App.js","index.js"],"names":["Main","useState","dragging","setDragging","topOne","setTopOne","leftOne","setLeftOne","diffOneX","setDiffOneX","diffOneY","setDiffOneY","topTwo","setTopTwo","leftTwo","setLeftTwo","diffTwoX","setDiffTwoX","diffTwoY","setDiffTwoY","lineWidth","setLineWidth","transform","setTransform","leftDiff","setLeftDiff","topDiff","setTopDiff","useEffect","ReactGa","initialize","pageview","ldiff","tdiff","width","Math","sqrt","pow","tform","atan2","dragStart","e","target","id","screenX","currentTarget","getBoundingClientRect","left","screenY","top","dragDrop","vLeftOne","vTopOne","vLeftTwo","vTopTwo","dragEnd","handleChange","source","parseInt","value","className","style","round","type","onChange","val","cos","sin","onMouseDown","onMouseMove","onMouseUp","event","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b71831a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport ReactGa from 'react-ga'\r\nimport '../css/main.css'\r\n\r\nfunction Main() {\r\n  // Drag\r\n  const [dragging, setDragging] = useState(false)\r\n\r\n  // Circle One\r\n  const [topOne, setTopOne] = useState(0)\r\n  const [leftOne, setLeftOne] = useState(0)\r\n  const [diffOneX, setDiffOneX] = useState(0)\r\n  const [diffOneY, setDiffOneY] = useState(0)\r\n\r\n  // Circle One\r\n  const [topTwo, setTopTwo] = useState(400)\r\n  const [leftTwo, setLeftTwo] = useState(400)\r\n  const [diffTwoX, setDiffTwoX] = useState(0)\r\n  const [diffTwoY, setDiffTwoY] = useState(0)\r\n\r\n  // Line\r\n  const [lineWidth, setLineWidth] = useState(0)\r\n  const [transform, setTransform] = useState(0)\r\n  const [leftDiff, setLeftDiff] = useState(0)\r\n  const [topDiff, setTopDiff] = useState(0)\r\n\r\n  useEffect(() => {\r\n    ReactGa.initialize('UA-62711254-5')\r\n    ReactGa.pageview('/circles')\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // calculate: width and transform\r\n    let ldiff = leftTwo - leftOne\r\n    let tdiff = topTwo - topOne\r\n    let width = Math.sqrt(Math.pow(ldiff, 2) + Math.pow(tdiff, 2))\r\n    let tform = Math.atan2(tdiff, ldiff)\r\n\r\n    setLeftDiff(ldiff)\r\n    setTopDiff(tdiff)\r\n    setLineWidth(width)\r\n    setTransform(tform)\r\n  }, [leftOne, topOne, leftTwo, topTwo])\r\n\r\n  const dragStart = (e) => {\r\n    setDragging(true)\r\n    if (e.target.id === 'circleOne') {\r\n      setDiffOneX(e.screenX - e.currentTarget.getBoundingClientRect().left)\r\n      setDiffOneY(e.screenY - e.currentTarget.getBoundingClientRect().top)\r\n    } else if (e.target.id === 'circleTwo') {\r\n      setDiffTwoX(e.screenX - e.currentTarget.getBoundingClientRect().left)\r\n      setDiffTwoY(e.screenY - e.currentTarget.getBoundingClientRect().top)\r\n    }\r\n  }\r\n\r\n  const dragDrop = (e) => {\r\n    let vLeftOne\r\n    let vTopOne\r\n    let vLeftTwo\r\n    let vTopTwo\r\n\r\n    if (dragging) {\r\n      if (e.target.id === 'circleOne') {\r\n        vLeftOne = e.screenX - diffOneX\r\n        vTopOne = e.screenY - diffOneY\r\n        setLeftOne(vLeftOne)\r\n        setTopOne(vTopOne)\r\n      } else if (e.target.id === 'circleTwo') {\r\n        vLeftTwo = e.screenX - diffTwoX\r\n        vTopTwo = e.screenY - diffTwoY\r\n        setLeftTwo(vLeftTwo)\r\n        setTopTwo(vTopTwo)\r\n      }\r\n    }\r\n  }\r\n\r\n  const dragEnd = () => {\r\n    setDragging(false)\r\n  }\r\n\r\n  const handleChange = (e, id, source) => {\r\n    if (id === 'circleOne') {\r\n      if (source === 'X') {\r\n        setLeftOne(parseInt(e.currentTarget.value))\r\n      } else if (source === 'Y') {\r\n        setTopOne(parseInt(e.currentTarget.value))\r\n      }\r\n    } else if (id === 'circleTwo') {\r\n      if (source === 'X') {\r\n        setLeftTwo(parseInt(e.currentTarget.value))\r\n      } else if (source === 'Y') {\r\n        setTopTwo(parseInt(e.currentTarget.value))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleChangeLine = (e) => {\r\n    let val = parseInt(e.currentTarget.value) || 100\r\n    let cos = Math.cos(transform) * val\r\n    let sin = Math.sin(transform) * val\r\n\r\n    setLeftTwo(cos - leftDiff + leftTwo)\r\n    setTopTwo(sin - topDiff + topTwo)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='Main'>\r\n        <div\r\n          className='line column v-center h-center'\r\n          style={{\r\n            top: `${topOne + 75}px`,\r\n            left: `${leftOne + 75}px`,\r\n            width: `${lineWidth}px`,\r\n            transform: `rotate(${transform}rad)`,\r\n          }}\r\n        >\r\n          <input\r\n            className='lineInput'\r\n            value={Math.round(lineWidth)}\r\n            type='number'\r\n            onChange={handleChangeLine}\r\n          />\r\n        </div>\r\n        <div\r\n          id='circleOne'\r\n          className='column v-center h-center'\r\n          style={{\r\n            top: `${topOne}px`,\r\n            left: `${leftOne}px`,\r\n          }}\r\n          onMouseDown={dragStart}\r\n          onMouseMove={dragDrop}\r\n          onMouseUp={dragEnd}\r\n        >\r\n          <span>\r\n            X{' '}\r\n            <input\r\n              value={Math.round(leftOne)}\r\n              type='number'\r\n              onChange={(event) => handleChange(event, 'circleOne', 'X')}\r\n            />\r\n          </span>\r\n          <span>\r\n            Y{' '}\r\n            <input\r\n              value={Math.round(topOne)}\r\n              type='number'\r\n              onChange={(event) => handleChange(event, 'circleOne', 'Y')}\r\n            />\r\n          </span>\r\n        </div>\r\n\r\n        <div\r\n          id='circleTwo'\r\n          className='column v-center h-center'\r\n          style={{\r\n            top: `${topTwo}px`,\r\n            left: `${leftTwo}px`,\r\n          }}\r\n          onMouseDown={dragStart}\r\n          onMouseMove={dragDrop}\r\n          onMouseUp={dragEnd}\r\n        >\r\n          <span>\r\n            X{' '}\r\n            <input\r\n              value={Math.round(leftTwo)}\r\n              type='number'\r\n              onChange={(event) => handleChange(event, 'circleTwo', 'X')}\r\n            />\r\n          </span>\r\n          <span>\r\n            Y{' '}\r\n            <input\r\n              value={Math.round(topTwo)}\r\n              type='number'\r\n              onChange={(event) => handleChange(event, 'circleTwo', 'Y')}\r\n            />\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import Main from './components/Main'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '../src/css/index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}